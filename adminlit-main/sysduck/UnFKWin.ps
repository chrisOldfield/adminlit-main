
System Admin Scripts
import os.py
import os
import subprocess

# Start the Wireshark capture
p = subprocess.Popen(["wireshark", "-k", "-i", "1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Set the capture filter to only show HTTP and HTTPS traffic
p.stdin.write(b"http or https\n")

# Start the display filter to only show suspicious packages
p.stdin.write(b"frame contains \"suspicious\"\n")

# Wait for the capture to finish
p.wait()

# Stop the capture
p.terminate()

# Check the output for suspicious packages
output = p.stdout.read()
if b"suspicious" in output:
    print("Suspicious packages detected!")
else:
    print("No suspicious packages detected.")
    
#Lan packet analysis
import os
import subprocess

# Start the Wireshark capture
p = subprocess.Popen(["wireshark", "-k", "-i", "1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Set the capture filter to only show HTTP and HTTPS traffic
p.stdin.write(b"http or https\n")

# Start the display filter to only show suspicious packages
p.stdin.write(b"frame contains \"suspicious\"\n")

# Wait for the capture to finish
p.wait()

# Stop the capture
p.terminate()

# Check the output for suspicious packages
output = p.stdout.read()
if b"suspicious" in output:
    print("Suspicious packages detected!")
else:
    print("No suspicious packages detected.")

# Local network malicious traffic package capture


import os
import subprocess

# Start the Wireshark capture
p = subprocess.Popen(["wireshark", "-k", "-i", "1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Set the capture filter to only show HTTP and HTTPS traffic
p.stdin.write(b"http or https\n")

# Start the display filter to only show suspicious packages
p.stdin.write(b"frame contains \"suspicious\"\n")

# Wait for the capture to finish
p.wait()

# Stop the capture
p.terminate()

# Check the output for suspicious packages
output = p.stdout.read()
if b"suspicious" in output:
    print("Suspicious packages detected!")
else:
    print("No suspicious packages detected.")

# Local network malicious traffic package capture


#Jira Last Comment Variable

issue.comments.last.body
This JQL statement retrieves the body of the last comment added to the issue. You can use this in an automation rule with the "Send an email" action to include the last comment in the email notification.

Here is an example of how to use the JQL statement in an automation rule to send an email notification with the last comment included:

Go to the "Automation" tab in the Jira Service Desk project settings.
Click the "Create rule" button.
In the "Rule name" field, enter a name for the rule.
In the "When" section, select the trigger that will cause the rule to run. For example, you might choose the "Issue is updated" trigger.
In the "Then" section, click the "Add action" button and select the "Send an email" action.
In the "To" field, enter the email address of the recipient.
In the "Subject" field, enter the subject for the email.
In the "Body" field, enter the body of the email. You can use the JQL statement issue.comments.last.body to include the last comment in the email. For example:
Copy code
Hello,

A new comment has been added to the ticket:

{issue.comments.last.body}

Best regards,
[Your name]
Click "Save" to create the rule.
Once the rule is set up, it will run whenever the issue is updated and will send an email notification with the last comment included in the body of the email.

I hope this helps! Let me know if you have any questions.




//
LanTrafficAnalyzer
function logTraffic() {
  // Create a map to store the log entries
  const trafficLog = new Map();

  // Register an event listener for the "webRequest" event
  chrome.webRequest.onCompleted.addListener(
    function(details) {
      // Get the log entry for the request
      const logEntry = trafficLog.get(details.requestId);
      if (!logEntry) {
        return;
      }

      // Update the log entry with the response information
      logEntry.responseStatus = details.statusCode;
      logEntry.responseHeaders = details.responseHeaders;

      // Print the log entry to the console
      console.log(logEntry);

      // Write the log entry to a text file in the Downloads folder
      chrome.downloads.download({
        url: "data:text/plain," + encodeURIComponent(JSON.stringify(logEntry)),
        filename: "traffic_log.txt",
        conflictAction: "uniquify"
      });
    },
    {
      urls: ["<all_urls>"]
    }
  );

  chrome.webRequest.onBeforeSendHeaders.addListener(
    function(details) {
      // Create a new log entry for the request
      const logEntry = {
        requestId: details.requestId,
        requestMethod: details.method,
        requestUrl: details.url,
        requestHeaders: details.requestHeaders
      };

      // Store the log entry in the map
      trafficLog.set(details.requestId, logEntry);
    },
    {
      urls: ["<all_urls>"]
    },
    ["requestHeaders"]
  );
}

// Call the function to start monitoring traffic
logTraffic();
reinstallSysEssentials.py
import os
import platform
import requests

# Determine the current operating system
current_os = platform.system()

# Get the list of available updates for the current operating system
if current_os == "Windows":
    # Use the Windows Update service to check for updates
    # (replace with appropriate code for your OS)
    pass
elif current_os == "Linux":
    # Use the package manager to check for updates
    # (replace with appropriate code for your OS)
    pass

# Download the latest versions of Git, Python 3, Google Chrome,
# Visual Studio Code, Office 365, Firefox, and NVIDIA Gforce Experience
# (replace with appropriate code for your OS)

# Git
git_url = "https://github.com/git-for-windows/git/releases/download/v2.30.2.windows.1/Git-2.30.2-64-bit.exe"
git_file = "git.exe"
r = requests.get(git_url)
open(git_file, "wb").write(r.content)

# Python 3
python_url = "https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe"
python_file = "python.exe"
r = requests.get(python_url)
open(python_file, "wb").write(r.content)

# Google Chrome
chrome_url = "https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7B9E7C4791-E9D7-8F44-8E12-E1D6"

Set.Windows11update Policy.py
import os
import platform
import winreg

# Check the operating system version
current_os = platform.system()
if current_os != "Windows":
    print("This script is only for Windows systems.")
    exit()

# Check the Windows version
if not platform.release().startswith("11"):
    print("This script is only for Windows 11 systems.")
    exit()

# Check for misconfigured services
# (replace with appropriate code)

# Check the firewall rules
# (replace with appropriate code)

# Set the update policy
key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate", 0, winreg.KEY_SET_VALUE)
winreg.SetValueEx(key, "ElevateNonAdmins", 0, winreg.REG_DWORD, 0)
winreg.SetValueEx(key, "DeferFeatureUpdates", 0, winreg.REG_DWORD, 1)
winreg.SetValue


unF*** Win11 install.ps
@echo off

rem Get the list of network hardware
wmic nic get name,manufacturer,pnpdeviceid > hardware.txt

rem Prompt the user to select their default device
echo Please select your default network device from the following list:
type hardware.txt
set /p device=Enter the name of your default device:

rem Get the manufacturer and PnP device ID of the selected device
for /f "tokens=1,2,3" %%a in (hardware.txt) do (
  if "%%a" == "%device%" (
    set manufacturer=%%b
    set pnpdeviceid=%%c
  )
)

rem Check for available updates for the OEM drivers
pnpdeviceid=%pnpdeviceid:~1,-1%
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL CheckForUpdates 0,1

rem Install the updates
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL InstallUpdates 0,1

echo Done.
@echo off

rem Get the list of network hardware
wmic nic get name,manufacturer,pnpdeviceid > hardware.txt

rem Prompt the user to select their default device
echo Please select your default network device from the following list:
type hardware.txt
set /p device=Enter the name of your default device:

rem Get the manufacturer and PnP device ID of the selected device
for /f "tokens=1,2,3" %%a in (hardware.txt) do (
  if "%%a" == "%device%" (
    set manufacturer=%%b
    set pnpdeviceid=%%c
  )
)

rem Check for available updates for the OEM drivers
pnpdeviceid=%pnpdeviceid:~1,-1%
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL CheckForUpdates 0,1

rem Install the updates
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL InstallUpdates 0,1

echo Done.


rem windows 11 terminal command to ideitify all network hardware on a machine, then require user entry to select their default device from the list of hardware, and ensure all oem drivers for that device are up-to-date without using any of the windows system driver suggestions///

--------------------------------------------------------------------------

rem Here is a Windows command that you can use to scan for all settings, rules, and system utilities that are configured for local network sharing, force them to turn off their sharing functions unless they affect a core Windows feature for the current version of Windows, and list the running services:


@echo off

rem Scan for network sharing settings, rules, and utilities
netsh advfirewall firewall show rule name=all | findstr /i "shared" > sharing.txt

rem Turn off sharing for all items in the list, unless it affects a core Windows feature
for /f "tokens=1,2,*" %%a in (sharing.txt) do (
  if /i not "%%c" == "Core" (
    echo Disabling sharing for: %%a %%b
    netsh advfirewall firewall set rule name="%%a" new enable=no
  )
)

rem Get the list of running services
sc query state= all > services.txt

echo Running services:
type services.txt

echo Done.





rem This command uses the netsh utility to scan for network sharing settings, rules, and utilities, and turns off sharing for all items in the list that do not affect a core Windows feature. It then uses the sc utility to get a list of running services and displays it on the console.

rem Keep in mind that this command is just a simple example, and more advanced techniques may be needed to effectively disable network sharing for all settings, rules, and utilities in a real-world scenario.



rem Here is a Windows command that you can use to scan for all settings, rules, and system utilities that are configured for local network sharing, force them to turn off their sharing functions unless they affect a core Windows feature for the current version of Windows, and list the running services:


@echo off

rem Scan for network sharing settings, rules, and utilities
netsh advfirewall firewall show rule name=all | findstr /i "shared" > sharing.txt

rem Turn off sharing for all items in the list, unless it affects a core Windows feature
for /f "tokens=1,2,*" %%a in (sharing.txt) do (
  if /i not "%%c" == "Core" (
    echo Disabling sharing for: %%a %%b
    netsh advfirewall firewall set rule name="%%a" new enable=no
  )
)

rem Get the list of running services
sc query state= all > services.txt

echo Running services:
type services.txt

echo Done.





rem This command uses the netsh utility to scan for network sharing settings, rules, and utilities, and turns off sharing for all items in the list that do not affect a core Windows feature. It then uses the sc utility to get a list of running services and displays it on the console.

rem Keep in mind that this command is just a simple example, and more advanced techniques may be needed to effectively disable network sharing for all settings, rules, and utilities in a real-world scenario.

rem windows command to be run as administrator that purges all packages, files, device configurations, and path variables used with windows versions prior to that of the product license for the machine 



rem Here is a Windows command that you can use to purge all packages, files, device configurations, and path variables used with Windows versions prior to that of the product license for the machine:

rem This command uses the wmic utility to get a list of installed packages and their versions, and uninstalls any packages that are not compatible with the current product license. It also searches for and deletes any files that are not associated with the current product license, resets all device configurations to their default values, and removes any path variables that***


@echo off

rem Get the current product license for the machine
for /f "skip=1" %%a in ('wmic os get caption') do (
  set license=%%a
)

rem Get the list of installed packages
wmic product get name,version > packages.txt

rem Uninstall any packages that are not compatible with the current product license
for /f "tokens=1,2" %%a in (packages.txt) do (
  if /i not "%%b" == "%license%" (
    echo Uninstalling package: %%a
    wmic product where name="%%a" call uninstall /nointeractive
  )
)

rem Delete any files that are not associated with the current product license
for /f "tokens=*" %%a in ('dir /s /b ^| findstr /v "%license%"') do (
  echo Deleting file: %%a
  del "%%a"
)

rem Reset all device configurations to their default values
wmic device call reset

rem Remove any path variables that are not associated with the current product license
setx path ""
setx path "%systemroot%\system32;%systemroot%;%systemroot%\System32\Wbem"

echo Done.

----------------------------------------------------------------------
@echo off

rem Get the list of network hardware
wmic nic get name,manufacturer,pnpdeviceid > hardware.txt

rem Prompt the user to select their default device
echo Please select your default network device from the following list:
type hardware.txt
set /p device=Enter the name of your default device:

rem Get the manufacturer and PnP device ID of the selected device
for /f "tokens=1,2,3" %%a in (hardware.txt) do (
  if "%%a" == "%device%" (
    set manufacturer=%%b
    set pnpdeviceid=%%c
  )
)

rem Check for available updates for the OEM drivers
pnpdeviceid=%pnpdeviceid:~1,-1%
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL CheckForUpdates 0,1

rem Install the updates
wmic /namespace:\\root\wmi PATH MS_DRIVER_PROVIDER_WMI_Provider WHERE "PNPDeviceID='%pnpdeviceid%' AND Manufacturer='%manufacturer%'" CALL InstallUpdates 0,1

echo Done.


--------------------------------------------------




XMLtoCSV
rem Here is a Windows command that takes a list of URLs, indexes the string, parses the URL at the index of the last '/' character, and then asks the user to paste or input the string to replace it with:

@echo off

rem Set the index for the string
set index=5

rem Get the list of URLs
type urls.txt > list.txt

rem Parse the URL at the index of the last '/' character
for /f "tokens=%index% delims=/" %%a in ('type "list.txt"') do (
  set old=%%a
)

rem Prompt the user to paste or input the string to replace it with
set /p new=Enter the new string:

rem Replace the old string with the new one
type list.txt | findstr /v /c:"%old%" > temp.txt
move /y temp.txt list.txt
echo. >> list.txt
type list.txt | findstr /v /c:"" | findstr /v /c:"%new%" > temp.txt
echo %new% >> temp.txt
move /y temp.txt list.txt

echo Done.



rem This command reads the list of URLs from the urls.txt file and stores it in the list.txt file. It then uses the for loop to parse the URL at the index of the last '/' character and stores the parsed string in the old variable. The command then prompts the user to enter the new string to replace it with, and uses the findstr utility to replace the old string with the new one in the list.txt file.

rem Keep in mind that this is just a simple example, and more advanced techniques may be needed to effectively parse and replace strings in a real-world scenario. You can adjust the value of the index variable to change the index of the string that you want to parse and replace.
@chrisOldfield
Comment
Leave a comment
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About


import unittest
from unittest.mock import patch, mock_open
import your_module  # replace with the name of your module

class TestYourModule(unittest.TestCase):
    @patch('your_module.platform.system')
    def test_get_current_os(self, mock_system):
        mock_system.return_value = 'Windows'
        self.assertEqual(your_module.get_current_os(), 'Windows')

    @patch('your_module.platform.system')
    def test_get_updates(self, mock_system):
        mock_system.return_value = 'Windows'
        # assuming get_updates returns a boolean indicating success
        self.assertTrue(your_module.get_updates())

    @patch('your_module.requests.get')
    @patch('builtins.open', new_callable=mock_open)
    def test_download_file(self, mock_open, mock_get):
        mock_get.return_value.content = b'test content'
        your_module.download_file('http://example.com', 'example.txt')
        mock_open.assert_called_once_with('example.txt', 'wb')
        handle = mock_open()
        handle.write.assert_called_once_with(b'test content')

if __name__ == '__main__':
    unittest.main()